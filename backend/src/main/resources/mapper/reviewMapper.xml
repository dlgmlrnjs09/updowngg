<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="gg.updown.backend.main.api.review.mapper.ReviewMapper">

    <resultMap id="reviewWithTagsMap" type="reviewDto">
        <!-- review 테이블의 컬럼들 매핑 -->
        <id property="summonerReviewSeq" column="summoner_review_seq"/>
        <result property="matchId" column="match_id"/>
        <result property="reviewerSiteCode" column="reviewer_site_code"/>
        <result property="reviewerPuuid" column="reviewer_puuid"/>
        <result property="targetPuuid" column="target_puuid"/>
        <result property="comment" column="comment"/>
        <result property="isUp" column="is_up"/>
        <result property="regDt" column="reg_dt"/>
        <result property="updDt" column="upd_dt"/>
        <result property="delDt" column="del_dt"/>

        <!-- tag_code들을 List<String>으로 매핑 -->
        <collection property="tagCodeList" ofType="string" javaType="list">
            <result column="tag_code"/>
        </collection>
        <collection property="tagDtoList" ofType="gg.updown.backend.main.api.review.model.dto.ReviewTagDto">
            <result property="tagCode" column="tag_code"/>
            <result property="tagValue" column="tag_value"/>
            <result property="tagDescription" column="tag_description"/>
            <result property="tagUpdown" column="tag_updown"/>
            <result property="frequentCount" column="frequent_count"/>
        </collection>
    </resultMap>

    <select id="getWroteReviewList" parameterType="String" resultMap="reviewWithTagsMap">
        SELECT
            r.summoner_review_seq,
            r.match_id,
            reviewer_site_code,
            reviewer_puuid,
            target_puuid,
            is_up,
            comment,
            is_up,
            r.reg_dt,
            upd_dt,
            del_dt,
            t.tag_code,
            rt.tag_value,
            rt.tag_description,
            rt.tag_updown,
            COUNT(rt.*) OVER (PARTITION BY r.summoner_review_seq) as frequent_count
        FROM
            site_summoner_review r
            LEFT OUTER JOIN site_summoner_review_tag t ON r.summoner_review_seq = t.summoner_review_seq
            LEFT OUTER JOIN site_review_tag rt ON t.tag_code = rt.tag_code
        WHERE
            reviewer_puuid = #{reviewerPuuid}
          and del_dt IS NULL
    </select>

    <select id="getRecentReviewList" parameterType="map" resultMap="reviewWithTagsMap">
        SELECT
            r.summoner_review_seq,
            r.reviewer_site_code,
            r.reviewer_puuid,
            r.target_puuid,
            r.comment,
            r.reg_dt,
            r.is_up,
            ssrt.tag_code,
            srt.tag_value,
            srt.tag_description,
            srt.tag_updown
        FROM
            site_summoner_review r
                LEFT OUTER JOIN site_summoner_review_tag ssrt ON r.summoner_review_seq = ssrt.summoner_review_seq
                LEFT OUTER JOIN site_review_tag srt ON ssrt.tag_code = srt.tag_code
        WHERE
            r.del_dt IS NULL
            <if test="targetPuuid != null and targetPuuid != ''">
                and r.target_puuid = #{targetPuuid}
            </if>
        LIMIT
            #{limit}
    </select>

    <select id="getReviewTagList" parameterType="String">
        SELECT
            tag_code,
            tag_value,
            tag_description,
            tag_updown,
            tag_category
        FROM
            site_review_tag
        ORDER BY
            tag_updown desc, reg_dt desc
    </select>

    <select id="getReviewTagCategoryList" parameterType="String" resultType="reviewTagCategoryEntity">
        SELECT
            category_key,
            category_value,
            reg_dt
        FROM
            site_review_tag_category
        ORDER BY
            reg_dt desc
    </select>

    <!-- 리뷰 등록 -->
    <insert id="insertReview" parameterType="ReviewSubmitReqDto" useGeneratedKeys="true" keyProperty="summonerReviewSeq">
        INSERT INTO site_summoner_review (
            reviewer_site_code,
            reviewer_puuid,
            target_puuid,
            is_up,
            comment,
            match_id
        ) VALUES (
             #{reviewerSiteCode},
             #{reviewerPuuid},
             #{targetPuuid},
             #{isUp},
             #{comment},
             #{matchId}
         )
    </insert>

    <!-- 리뷰 태그 등록 -->
    <insert id="insertReviewTags" parameterType="java.util.Map">
        INSERT INTO site_summoner_review_tag (
        summoner_review_seq,
        tag_code
        ) VALUES
        <foreach collection="tagCodeList" item="tagCode" separator=",">
            (#{reviewSeq}, #{tagCode})
        </foreach>
    </insert>

    <delete id="deleteReviewTags" parameterType="Long">
        DELETE FROM site_summoner_review_tag WHERE summoner_review_seq = #{reviewSeq}
    </delete>

    <update id="updateReview" parameterType="ReviewUpdateReqDto">
        UPDATE site_summoner_review
        SET is_up = #{isUp}
            , comment = #{comment}
            , match_id = #{matchId}
        WHERE
            summoner_review_seq = #{summonerReviewSeq}
    </update>

    <select id="getReviewStatus" parameterType="String" resultType="reviewStatsDto">
        SELECT
            target_puuid as puuid,
            COUNT(CASE WHEN is_up = true THEN 1 END) as upCount,
            COUNT(CASE WHEN is_up = false THEN 1 END) as downCount,
            COUNT(*) AS totalReviewCnt,
            COUNT(CASE WHEN reg_dt >= CURRENT_TIMESTAMP - INTERVAL '30 days' THEN 1 END) AS last30DayReviewCnt
        FROM site_summoner_review
        where target_puuid = #{targetPuuid}
          and del_dt is NULL
        group by target_puuid
    </select>

    <select id="getReviewAvgRating" parameterType="String" resultType="reviewStatsDto">
        SELECT
            target_puuid as puuid,
            COUNT(CASE WHEN is_up = true THEN 1 END) as upCount,
            COUNT(CASE WHEN is_up = false THEN 1 END) as downCount
        FROM site_summoner_review
        where target_puuid = #{targetPuuid}
          and del_dt is NULL
        group by target_puuid
    </select>

    <select id="getFrequentTagCount" parameterType="String" resultType="reviewTagDto">
        select
            ssrt.tag_code,
            srt.tag_value,
            srt.tag_description,
            srt.tag_updown,
            count(*) as frequentCount
        from
            site_summoner_review ssr
            inner join site_summoner_review_tag ssrt on (ssr.summoner_review_seq = ssrt.summoner_review_seq)
            inner join site_review_tag srt on (ssrt.tag_code = srt.tag_code)
        where
            target_puuid = #{puuid}
            and ssr.del_dt IS NULL
        group by
            ssrt.tag_code, srt.tag_value, srt.tag_description, srt.tag_updown
    </select>

    <select id="getAvgRatingByChamp" parameterType="String" resultType="reviewRatingByChampDto">
        select
            champ_id ,
            champ_name,
            count(*) as playCount,
            COUNT(CASE WHEN is_up = true THEN 1 END) as upCount,
            COUNT(CASE WHEN is_up = false THEN 1 END) as downCount
        from
            lol_match_participant lm
                inner join site_summoner_review ssr on (lm.match_id = ssr.match_id and lm.puuid = ssr.target_puuid)
        where
            puuid = #{puuid}
        group by
            champ_id,
            champ_name
        order by
            count(*) desc
        limit 5
    </select>

    <select id="getAvgRatingByPosition" parameterType="String" resultType="reviewRatingByPositionDto">
        WITH positions AS (
            SELECT unnest(ARRAY['TOP', 'JUNGLE', 'MIDDLE', 'BOTTOM', 'UTILITY']) as position
        )
        SELECT
            p.position,
            COUNT(lm.puuid) as playCount,
            COUNT(CASE WHEN is_up = true THEN 1 END) as upCount,
            COUNT(CASE WHEN is_up = false THEN 1 END) as downCount
        FROM
            positions p
                LEFT JOIN lol_match_participant lm ON
                lm.position = p.position AND
                lm.puuid = #{puuid}
                LEFT JOIN site_summoner_review ssr ON
                lm.match_id = ssr.match_id AND
                lm.puuid = ssr.target_puuid
        GROUP BY
            p.position
        ORDER BY
            CASE p.position
                WHEN 'TOP' THEN 1
                WHEN 'JUNGLE' THEN 2
                WHEN 'MIDDLE' THEN 3
                WHEN 'BOTTOM' THEN 4
                WHEN 'UTILITY' THEN 5
            END
    </select>

    <insert id="insertSuggestTagList">
        INSERT INTO site_review_tag_suggestion (
            review_seq,
            tag_value,
            tag_description,
            is_up,
            tag_category
        ) VALUES
        <foreach collection="list" item="tag" separator=",">
            (
            #{tag.reviewSeq},
            #{tag.tagValue},
            #{tag.tagDescription},
            #{tag.isUp},
            #{tag.tagCategory}
            )
        </foreach>
    </insert>

    <select id="getReviewNotificationElement" parameterType="map" resultType="map">
        SELECT
            lm.game_mode,
            lm.game_create_dt,
            lmp.champ_name
        FROM
            lol_match lm
                INNER JOIN lol_match_participant lmp on (lm.match_id = lmp.match_id)
        WHERE
            lm.match_id = #{matchId}
          and lmp.puuid = #{targetPuuid}
    </select>
</mapper>

