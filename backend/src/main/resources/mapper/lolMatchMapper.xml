<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="gg.updown.backend.main.api.lol.match.mapper.LolMatchMapper">
    <select id="getLatestMatchId" parameterType="String" resultType="String">
        SELECT
            match_id
        FROM
            lol_match_participant
        WHERE
            puuid = #{puuid}
        ORDER BY
            match_id DESC
        LIMIT 1
    </select>

    <select id="getLatestRequestMatchId" parameterType="String" resultType="String">
        SELECT
            match_id
        FROM
            lol_match_request
        WHERE
            puuid = #{puuid}
        ORDER BY
            match_id DESC
        LIMIT 1
    </select>

    <select id="countingMatchByMatchId" parameterType="String" resultType="int">
        SELECT
            count(*)
        FROM
            lol_match_participant
        WHERE
            match_id = #{matchId}
    </select>

    <select id="getMatchInfo" parameterType="String" resultType="LolMatchEntity">
        SELECT
            match_id
            , lol_match_seq
            , game_create_dt
            , game_duration
            , game_id
            , game_mode
            , game_name
            , game_start_dt
            , game_type
            , game_version
            , map_id
            , queue_id
        FROM
            lol_match
        WHERE
            match_id = #{matchId}
    </select>

    <select id="getMatchParticipantList" parameterType="String" resultType="LolMatchParticipantEntity">
        SELECT
            match_participant_seq,
            match_id,
           puuid,
           riot_id_game_name,
           riot_id_tagline,
           position,
           summoner_id,
           summoner_name,
           summoner_level,
           team_id,
           CASE WHEN team_id = 100 THEN 'BLUE' WHEN team_id = 200 THEN 'RED' END as teamName,
           time_played,
           kills,
           assists,
           deaths,
           champ_level,
           total_damage_to_champion,
           total_damage_taken,
            champ_id,
            champ_name,
            is_win
        FROM
            lol_match_participant
        WHERE
            match_id = #{matchId}
    </select>

    <resultMap id="matchInfoResultMap" type="gg.updown.backend.main.api.lol.match.model.dto.LolMatchInfoResDto">
        <id property="matchInfo.matchId" column="match_id"/>
        <result property="matchInfo.gameDuration" column="game_duration"/>
        <result property="matchInfo.gameMode" column="game_mode"/>
        <result property="matchInfo.gameStartDt" column="game_start_dt"/>
        <result property="matchInfo.gameType" column="game_type"/>
        <result property="matchInfo.queueId" column="queue_id"/>
        <collection property="participantList" ofType="gg.updown.backend.main.api.lol.match.model.dto.LolMatchParticipantDto">
            <id property="matchId" column="match_id"/>
            <id property="puuid" column="puuid"/>
            <result property="riotIdGameName" column="riot_id_game_name"/>
            <result property="riotIdTagline" column="riot_id_tagline"/>
            <result property="position" column="position"/>
            <result property="teamId" column="team_id"/>
            <result property="kills" column="kills"/>
            <result property="assists" column="assists"/>
            <result property="deaths" column="deaths"/>
            <result property="champLevel" column="champ_level"/>
            <result property="champId" column="champ_id"/>
            <result property="champName" column="champ_name"/>
            <result property="totalDamageToChampion" column="total_damage_to_champion"/>
            <result property="totalDamageTaken" column="total_damage_taken"/>
            <result property="champProfileIconUrl" column="champ_profile_icon_url"/>
        </collection>
    </resultMap>

    <insert id="insertMatch" parameterType="LolMatchEntity">
        INSERT INTO lol_match (
            match_id,
            game_create_dt,
            game_duration,
            game_id,
            game_mode,
            game_name,
            game_start_dt,
            game_type,
            game_version,
            map_id,
            queue_id
        ) VALUES (
             #{matchId},
             #{gameCreateDt},
             #{gameDuration},
             #{gameId},
             #{gameMode},
             #{gameName},
             #{gameStartDt},
             #{gameType},
             #{gameVersion},
             #{mapId},
             #{queueId}
         )
    </insert>

    <update id="updateMatch" parameterType="LolMatchEntity">
        UPDATE lol_match
        SET
            game_create_dt = #{gameCreateDt},
            game_duration = #{gameDuration},
            game_id = #{gameId},
            game_mode = #{gameMode},
            game_name = #{gameName},
            game_start_dt = #{gameStartDt},
            game_type = #{gameType},
            game_version = #{gameVersion},
            map_id = #{mapId},
            queue_id = #{queueId}
        WHERE
            match_id = #{matchId}
    </update>

    <insert id="insertMatchParticipants" parameterType="java.util.List">
        INSERT INTO lol_match_participant (
            match_id,
            puuid,
            riot_id_game_name,
            riot_id_tagline,
            position,
            summoner_id,
            summoner_level,
            summoner_name,
            team_id,
            time_played,
            kills,
            assists,
            deaths,
            champ_level,
            champ_id,
            champ_name,
            total_damage_to_champion,
            total_damage_taken,
            is_win
        ) VALUES
        <foreach collection="list" item="participant" separator=",">
        (
            #{participant.matchId},
            #{participant.puuid},
            #{participant.riotIdGameName},
            #{participant.riotIdTagline},
            #{participant.position},
            #{participant.summonerId},
            #{participant.summonerLevel},
            #{participant.summonerName},
            #{participant.teamId},
            #{participant.timePlayed},
            #{participant.kills},
            #{participant.assists},
            #{participant.deaths},
            #{participant.champLevel},
            #{participant.champId},
            #{participant.champName},
            #{participant.totalDamageToChampion},
            #{participant.totalDamageTaken},
            #{participant.isWin}
        )
        </foreach>
    </insert>

    <insert id="insertMatchIdList" parameterType="list">
        INSERT INTO lol_match (
            match_id
        ) VALUES
        <foreach collection="list" item="match" separator=",">
        (
            #{match}
        )
        </foreach>
        ON CONFLICT (match_id) DO NOTHING;
    </insert>

    <insert id="insertMatchRequests" parameterType="map">
        INSERT INTO lol_match_request (
            match_id,
            puuid
        ) VALUES
        <foreach collection="matchIdList" item="match" separator=",">
        (
            #{match},
            #{puuid}
        )
        </foreach>
    </insert>

    <select id="selectMatchRequestList" parameterType="map" resultType="String">
        SELECT DISTINCT
        m.match_id,
        m.game_create_dt,
        m.game_mode
        FROM
        lol_match m
        JOIN lol_match_request r ON m.match_id = r.match_id
        <if test="reviewFilter != null">
            JOIN lol_match_participant mp ON m.match_id = mp.match_id
            LEFT JOIN site_summoner_review sr ON (
            m.match_id = sr.match_id
            AND
            <choose>
                <when test='reviewFilter == "reviewed"'>
                    r.puuid = sr.target_puuid
                </when>
                <otherwise>
                    r.puuid = sr.reviewer_puuid
                </otherwise>
            </choose>
            )
        </if>
        WHERE
        r.puuid = #{puuid}
        <if test="reviewFilter != null">
            AND mp.puuid != #{puuid}
            <choose>
                <when test='reviewFilter == "reviewed"'>
                    AND sr.summoner_review_seq IS NOT NULL
                </when>
                <otherwise>
                    AND sr.summoner_review_seq IS NULL
                </otherwise>
            </choose>
        </if>
        <if test="gameModeFilter != null and gameModeFilter.code != 'ALL'">
            AND m.queue_id IN
            <foreach item="queueId" collection="gameModeFilter.queueIds" open="(" separator="," close=")">
                #{queueId}
            </foreach>
        </if>
        ORDER BY
        m.match_id DESC
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <select id="existsMatchedTogether" parameterType="map" resultType="boolean">
        SELECT EXISTS (
            SELECT 1
            FROM lol_match_participant p1
                     JOIN lol_match_participant p2
                          ON p1.match_id = p2.match_id
                     JOIN lol_match m
                          ON p1.match_id = m.match_id
            WHERE p1.puuid = #{loginPuuid}
              AND p2.puuid = #{targetPuuid}
              AND m.game_start_dt BETWEEN #{startDate} AND #{endDate}
        ) as has_played_together;
    </select>

    <select id="getLatestMatchIdTogether" parameterType="map" resultType="String">
        SELECT p1.match_id
        FROM lol_match_participant p1
                 JOIN lol_match_participant p2 ON p1.match_id = p2.match_id
                 JOIN lol_match m ON p1.match_id = m.match_id
        WHERE p1.puuid = #{loginPuuid}
          AND p2.puuid = #{targetPuuid}
          AND m.game_start_dt BETWEEN #{startDate} AND #{endDate}
        ORDER BY m.game_start_dt DESC
        LIMIT 1;
    </select>

    <select id="getSummonerBasicInfoByPuuid" parameterType="String" resultType="map">
        select
            case when sa.member_site_code is not null then true else false end as has_site_account,
            case when ra.game_name is not null then true else false end as has_riot_account,
            ra.puuid,
            ra.game_name,
            ra.tag_line,
            ls.profile_icon_id
        from
            riot_account ra
                left outer join site_account sa on (sa.puuid = ra.puuid and sa.del_dt is null)
                inner join lol_summoner ls on (ra.puuid = ls.puuid)
        where
            ra.puuid = #{puuid}
    </select>

    <select id="getChampionNameByKey" parameterType="String" resultType="String">
        select
            name_us
        from
            lol_champion
        where
            key = #{key}
    </select>
</mapper>