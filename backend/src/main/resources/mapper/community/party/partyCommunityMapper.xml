<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="gg.updown.backend.main.api.community.party.mapper.PartyCommunityMapper">

    <select id="getPartyPostList" parameterType="DuoCommunitySearchFilter" resultType="PartyPostCardDto">
        select
            scp.post_id,
            scp.community_code ,
            scp.title ,
            scp."content" ,
            scp.reg_dt ,
            scp.upd_dt ,
            scp.writer_site_code ,
            scp.writer_puuid,
            scd.game_mode ,
            scd.is_open_top,
            scd.is_open_jungle,
            scd.is_open_mid,
            scd.is_open_ad,
            scd.is_open_sup,
            scd.post_status,
            scd.is_use_mic,
            scpp.top_puuid,
            scpp.jungle_puuid,
            scpp.mid_puuid,
            scpp.ad_puuid,
            scpp.sup_puuid
        from
            site_community_post scp
            inner join site_community_party scd on (scp.post_id = scd.post_id)
            inner join site_community_party_participant scpp on (scp.post_id = scpp.post_id)
        where
            scp.del_dt is null
            and scp.community_code = 'party'
            and scd.post_status = 'OPEN'
            and scd.del_dt is null
            <if test="gameMode != null">
                and game_mode = #{gameMode}
            </if>
            <if test="positionSelf != null">
                and position_self = #{positionSelf.code}
            </if>
            <if test="positionFind != null">
                and position_find = #{positionFind}
            </if>
        order by scp.post_id desc
        offset #{offset} limit #{limit}
    </select>

    <insert id="insertPartyPost" parameterType="PartyCommunityEntity">
        INSERT INTO site_community_party (
            post_id,
            game_mode,
            is_open_top,
            is_open_jungle,
            is_open_mid,
            is_open_ad,
            is_open_sup,
            post_status,
            is_use_mic
        ) VALUES (
            #{postId},
             #{gameMode},
             #{isOpenTop},
             #{isOpenJungle},
             #{isOpenMid},
             #{isOpenAd},
             #{isOpenSup},
             #{postStatus},
             #{isUseMic}
        );
    </insert>

    <insert id="insertPartyParticipant" parameterType="PartyCommunityParticipantEntity">
        INSERT INTO site_community_party_participant (
            post_id
            <if test="topPuuid != null">
                , top_puuid
            </if>
            <if test="junglePuuid != null">
                , jungle_puuid
            </if>
            <if test="midPuuid != null">
                , mid_puuid
            </if>
            <if test="adPuuid != null">
                , ad_puuid
            </if>
            <if test="supPuuid != null">
                , sup_puuid
            </if>
        ) VALUES (
            #{postId}
            <if test="topPuuid != null">
                , #{topPuuid}
            </if>
            <if test="junglePuuid != null">
                , #{junglePuuid}
            </if>
            <if test="midPuuid != null">
                , #{midPuuid}
            </if>
            <if test="adPuuid != null">
                , #{adPuuid}
            </if>
            <if test="supPuuid != null">
                , #{supPuuid}
            </if>
        )
    </insert>

    <select id="selectParticipantWithLock" resultType="PartyCommunityParticipantEntity" parameterType="long">
        SELECT
            post_id,
            scpp.top_puuid,
            scpp.jungle_puuid,
            scpp.mid_puuid,
            scpp.ad_puuid,
            scpp.sup_puuid
        FROM site_community_party_participant scpp
        WHERE post_id = #{postId}
            FOR UPDATE
    </select>

    <insert id="insertPartyApplicant" parameterType="PartyCommunityApplicantEntity">
        INSERT INTO site_community_party_applicant (
            post_id, applicant_puuid, position, applicant_seq
        ) VALUES (
            #{postId}, #{applicantPuuid}, #{position}, #{applicantSeq}
        )
    </insert>

    <select id="checkPartyReader" parameterType="map" resultType="boolean">
        SELECT EXISTS (
            SELECT 1
            FROM site_community_post
            WHERE
                post_id = #{postId}
                and writer_puuid = #{puuid}
        )
    </select>

    <select id="checkAlreadyByPosition" parameterType="map" resultType="boolean">
        SELECT EXISTS (
            SELECT 1
            FROM site_community_party_participant
            WHERE
                post_id = #{postId}
                <choose>
                    <when test="position == 'TOP'">
                        and top_puuid is not null
                    </when>
                    <when test="position == 'JG'">
                        and jungle_puuid is not null
                    </when>
                    <when test="position == 'MID'">
                        and mid_puuid is not null
                    </when>
                    <when test="position == 'AD'">
                        and ad_puuid is not null
                    </when>
                    <when test="position == 'SUP'">
                        and sup_puuid is not null
                    </when>
                </choose>
        )
    </select>

    <select id="checkParticipateAnotherPosition" parameterType="map" resultType="boolean">
        SELECT EXISTS (
        SELECT 1
        FROM site_community_party_participant
        WHERE
            post_id = #{postId}
            and (
                top_puuid = #{puuid}
                or jungle_puuid = #{puuid}
                or mid_puuid = #{puuid}
                or ad_puuid = #{puuid}
                or sup_puuid = #{puuid}
            )
        )
    </select>

    <update id="updateApplicantStatus" parameterType="map">
        UPDATE site_community_party_applicant
        SET is_approve = #{isApproval}
        WHERE
            post_id = #{postId}
            and applicant_seq = #{applicantSeq}
    </update>

    <select id="getNextApplicantSeq" parameterType="long" resultType="long">
        WITH seq AS (
            INSERT INTO sequence_party_applicant(post_id, current_seq)
                VALUES (#{postId}, 1)
                ON CONFLICT (post_id)
                    DO UPDATE SET current_seq = sequence_party_applicant.current_seq + 1
                RETURNING current_seq
        )
        SELECT current_seq FROM seq
    </select>

    <select id="getApplicant" resultType="PartyCommunityApplicantEntity" parameterType="map">
        SELECT
            post_id,
            applicant_puuid,
            position,
            is_approve,
            reg_dt,
            upd_dt,
            applicant_seq
        FROM
            site_community_party_applicant
        WHERE
            applicant_seq = #{applicantSeq}
            AND post_id = #{postId}
    </select>

    <select id="getApplicantList" resultType="PartyCommunityApplicantEntity" parameterType="map">
        SELECT
            post_id,
            applicant_puuid,
            position,
            is_approve,
            reg_dt,
            upd_dt,
            applicant_seq
        FROM
            site_community_party_applicant
        WHERE
            applicant_puuid = #{puuid}
            AND post_id IN
            <foreach item="postId" collection="postIds" open="(" separator="," close=")">
                #{postId}
            </foreach>
    </select>

    <select id="getPartyActivePost" parameterType="String" resultType="PartyPostCardDto">
        select
            scp.post_id,
            scp.community_code ,
            scp.title ,
            scp."content" ,
            scp.reg_dt ,
            scp.upd_dt ,
            scp.writer_site_code ,
            scp.writer_puuid,
            scd.game_mode ,
            scd.is_open_top,
            scd.is_open_jungle,
            scd.is_open_mid,
            scd.is_open_ad,
            scd.is_open_sup,
            scd.post_status,
            scd.is_use_mic,
            scpp.top_puuid,
            scpp.jungle_puuid,
            scpp.mid_puuid,
            scpp.ad_puuid,
            scpp.sup_puuid,
            scd.post_status
        from
            site_community_post scp
            inner join site_community_party scd on (scp.post_id = scd.post_id)
            inner join site_community_party_participant scpp on (scp.post_id = scpp.post_id)
        where
            scp.del_dt is null
            and scp.writer_puuid = #{puuid}
            and scd.post_status = 'OPEN'
    </select>

    <select id="getMyParticipantPost" parameterType="String" resultType="PartyPostCardDto">
        select
            scp.post_id,
            scp.community_code ,
            scp.title ,
            scp."content" ,
            scp.reg_dt ,
            scp.upd_dt ,
            scp.writer_site_code ,
            scp.writer_puuid,
            scd.game_mode ,
            scd.is_open_top,
            scd.is_open_jungle,
            scd.is_open_mid,
            scd.is_open_ad,
            scd.is_open_sup,
            scd.post_status,
            scd.is_use_mic,
            scpp.top_puuid,
            scpp.jungle_puuid,
            scpp.mid_puuid,
            scpp.ad_puuid,
            scpp.sup_puuid,
            scd.post_status
        from
            site_community_post scp
                inner join site_community_party scd on (scp.post_id = scd.post_id)
                inner join site_community_party_participant scpp on (scp.post_id = scpp.post_id)
        where
            scp.del_dt is null
            and scd.post_status = 'OPEN'
            and (
                top_puuid = #{puuid}
                or jungle_puuid = #{puuid}
                or mid_puuid = #{puuid}
                or ad_puuid = #{puuid}
                or sup_puuid = #{puuid}
            )
    </select>

    <select id="checkMyOpenParticipantPost" parameterType="String" resultType="boolean">
        SELECT EXISTS (
            SELECT 1
           FROM site_community_post scp
            inner join site_community_party scd on (scp.post_id = scd.post_id)
            inner join site_community_party_participant scpp on (scp.post_id = scpp.post_id)
            WHERE scp.del_dt is null
                 and scd.post_status = 'OPEN'
                 and (
                   top_puuid = #{puuid}
                       or jungle_puuid = #{puuid}
                       or mid_puuid = #{puuid}
                       or ad_puuid = #{puuid}
                       or sup_puuid = #{puuid}
                   )
        )
    </select>

    <select id="getWaitingApplicantList" resultType="PartyCommunityApplicantEntity" parameterType="long">
        SELECT
            post_id,
            applicant_puuid,
            position,
            is_approve,
            reg_dt,
            upd_dt,
            applicant_seq
        FROM
            site_community_party_applicant
        WHERE
            post_id = #{postId}
            and is_approve is null
            and del_dt is null
    </select>

    <update id="updateParticipant" parameterType="PartyCommunityParticipantEntity">
        UPDATE site_community_party_participant
        SET upd_dt = current_timestamp
            <if test="topPuuid != null">
                , top_puuid = #{topPuuid}
            </if>
            <if test="junglePuuid != null">
                , jungle_puuid = #{junglePuuid}
            </if>
            <if test="midPuuid != null">
                , mid_puuid = #{midPuuid}
            </if>
            <if test="adPuuid != null">
                , ad_puuid = #{adPuuid}
            </if>
            <if test="supPuuid != null">
                , sup_puuid = #{supPuuid}
            </if>
        WHERE
            post_id = #{postId}
    </update>

    <update id="deleteAnotherApplicant" parameterType="PartyCommunityApplicantEntity">
        UPDATE site_community_party_applicant
        SET del_dt = current_timestamp
        WHERE
            post_id = #{postId}
            AND applicant_puuid = #{applicantPuuid}
            AND applicant_seq != #{applicantSeq}
    </update>

    <update id="updatePartyStatus" parameterType="map">
        UPDATE
            site_community_party
        SET
            post_status = #{postStatus},
            upd_dt = current_timestamp
        WHERE
            post_id = #{postId}
    </update>

    <select id="checkAlreadyMyParty" parameterType="String" resultType="boolean">
        SELECT EXISTS (
            SELECT 1
            FROM site_community_post scp
                inner join site_community_party scp2 on (scp.post_id = scp2.post_id)
            WHERE
                scp.writer_puuid = #{puuid}
                and scp.del_dt is null
                and scp2.del_dt is null
                and scp2.post_status = 'OPEN'
        )
    </select>

    <select id="getPartyHostedHistory" parameterType="map" resultType="PartyCommunityHistoryDto">
        select
            scp.post_id,
            "content",
            scp.reg_dt ,
            game_mode,
            scp2.is_open_top ,
            scp2.is_open_jungle ,
            scp2.is_open_mid ,
            scp2.is_open_ad ,
            scp2.is_open_sup ,
            post_status,
            scpp.top_puuid,
            scpp.jungle_puuid,
            scpp.mid_puuid,
            scpp.ad_puuid,
            scpp.sup_puuid
        from
            site_community_post scp
                inner join site_community_party scp2 on (scp.post_id = scp2.post_id)
                inner join site_community_party_participant scpp on (scp.post_id = scpp.post_id)
        where
            scp.writer_puuid = #{puuid}
          and scp2.post_status in ('CANCEL', 'CLOSE')
          and scp.del_dt is null
          and scp2.del_dt is null
        order by
            scp.post_id desc
        LIMIT #{limit} OFFSET (#{page} - 1) * #{limit}
    </select>

    <select id="getPartyHostedHistoryCount" parameterType="String" resultType="int">
        select
            count(*)
        from
            site_community_post scp
                inner join site_community_party scp2 on (scp.post_id = scp2.post_id)
                inner join site_community_party_participant scpp on (scp.post_id = scpp.post_id)
        where
            scp.writer_puuid = #{puuid}
          and scp2.post_status in ('CANCEL', 'CLOSE')
          and scp.del_dt is null
          and scp2.del_dt is null
    </select>

    <select id="getPartyParticipatedHistory" parameterType="map" resultType="PartyCommunityHistoryDto">
        select
            scp.post_id,
            "content",
            scp.reg_dt ,
            game_mode,
            scp2.is_open_top ,
            scp2.is_open_jungle ,
            scp2.is_open_mid ,
            scp2.is_open_ad ,
            scp2.is_open_sup ,
            post_status,
            scpp.top_puuid,
            scpp.jungle_puuid,
            scpp.mid_puuid,
            scpp.ad_puuid,
            scpp.sup_puuid
        from
            site_community_post scp
            inner join site_community_party scp2 on (scp.post_id = scp2.post_id)
            inner join site_community_party_participant scpp on (scp.post_id = scpp.post_id)
        where
            scp.del_dt is null
            and scp2.del_dt is null
            and scp.writer_puuid != #{puuid}
            and (
            scpp.top_puuid = #{puuid}
                or scpp.jungle_puuid = #{puuid}
                or scpp.mid_puuid = #{puuid}
                or scpp.ad_puuid = #{puuid}
                or scpp.sup_puuid = #{puuid}
            )
        order by
            scp.post_id desc
        LIMIT #{limit} OFFSET (#{page} - 1) * #{limit}
    </select>

    <select id="getPartyParticipatedHistoryCount" parameterType="String" resultType="int">
        select
            count(*)
        from
            site_community_post scp
                inner join site_community_party scp2 on (scp.post_id = scp2.post_id)
                inner join site_community_party_participant scpp on (scp.post_id = scpp.post_id)
        where
            scp.del_dt is null
          and scp2.del_dt is null
          and scp.writer_puuid != #{puuid}
          and (
            scpp.top_puuid = #{puuid}
                or scpp.jungle_puuid = #{puuid}
                or scpp.mid_puuid = #{puuid}
                or scpp.ad_puuid = #{puuid}
                or scpp.sup_puuid = #{puuid}
            )
    </select>

    <resultMap id="AppliedHistoryResultMap" type="PartyCommunityAppliedHistoryDto">
        <id property="postId" column="post_id"/>
        <result property="gameMode" column="game_mode"/>
        <result property="content" column="content"/>
        <result property="isOpenTop" column="is_open_top"/>
        <result property="isOpenJungle" column="is_open_jungle"/>
        <result property="isOpenMid" column="is_open_mid"/>
        <result property="isOpenAd" column="is_open_ad"/>
        <result property="isOpenSup" column="is_open_sup"/>
        <result property="topPuuid" column="top_puuid"/>
        <result property="junglePuuid" column="jungle_puuid"/>
        <result property="midPuuid" column="mid_puuid"/>
        <result property="adPuuid" column="ad_puuid"/>
        <result property="supPuuid" column="sup_puuid"/>
        <result property="postStatus" column="post_status"/>
        <result property="regDt" column="reg_dt"/>

        <association property="applicantDto" javaType="PartyCommunityApplicantDto">
            <result property="postId" column="post_id"/>
            <result property="puuid" column="applicant_puuid"/>
            <result property="position" column="position"/>
            <result property="isApprove" column="is_approve"/>
        </association>
    </resultMap>

    <select id="getPartyAppliedHistory" parameterType="map" resultMap="AppliedHistoryResultMap">
        select
            scp.post_id,
            "content",
            scp.reg_dt ,
            game_mode,
            scp2.is_open_top ,
            scp2.is_open_jungle ,
            scp2.is_open_mid ,
            scp2.is_open_ad ,
            scp2.is_open_sup ,
            post_status,
            scpp.top_puuid,
            scpp.jungle_puuid,
            scpp.mid_puuid,
            scpp.ad_puuid,
            scpp.sup_puuid,
            scpa.applicant_puuid,
            scpa.position,
            scpa.is_approve,
            scpa.reg_dt
        from
            site_community_post scp
                inner join site_community_party scp2 on (scp.post_id = scp2.post_id)
                inner join site_community_party_participant scpp on (scp.post_id = scpp.post_id)
                inner join site_community_party_applicant scpa on (scp.post_id = scpa.post_id)
        where
            scp.del_dt is null
            and scp2.del_dt is null
            and scpa.del_dt is null
            and scpa.applicant_puuid = #{puuid}
        order by
            scp.post_id desc
        LIMIT #{limit} OFFSET (#{page} - 1) * #{limit}
    </select>

    <select id="getPartyAppliedHistoryCount" parameterType="String" resultType="int">
        select
            count(*)
        from
            site_community_post scp
                inner join site_community_party scp2 on (scp.post_id = scp2.post_id)
                inner join site_community_party_participant scpp on (scp.post_id = scpp.post_id)
                inner join site_community_party_applicant scpa on (scp.post_id = scpa.post_id)
        where
            scp.del_dt is null
          and scp2.del_dt is null
          and scpa.del_dt is null
          and scpa.applicant_puuid = #{puuid}
    </select>

    <update id="leaveMyParty" parameterType="map">
        UPDATE public.site_community_party_participant
        SET
            top_puuid = CASE WHEN top_puuid = #{puuid} THEN NULL ELSE top_puuid END,
            jungle_puuid = CASE WHEN jungle_puuid = #{puuid} THEN NULL ELSE jungle_puuid END,
            mid_puuid = CASE WHEN mid_puuid = #{puuid} THEN NULL ELSE mid_puuid END,
            ad_puuid = CASE WHEN ad_puuid = #{puuid} THEN NULL ELSE ad_puuid END,
            sup_puuid = CASE WHEN sup_puuid = #{puuid} THEN NULL ELSE sup_puuid END,
            upd_dt = CURRENT_TIMESTAMP
        WHERE post_id = #{postId}
          AND (
              top_puuid = #{puuid}
              OR jungle_puuid = #{puuid}
              OR mid_puuid = #{puuid}
              OR ad_puuid = #{puuid}
              OR sup_puuid = #{puuid}
          )
    </update>
</mapper>