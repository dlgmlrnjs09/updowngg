name: Frontend Deploy

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend  # 모든 run 명령어의 기본 작업 디렉토리 설정

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # 디버깅을 위한 디렉토리 구조 확인
      - name: Check directory structure
        run: |
          pwd
          ls -la

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
          # cache: 'npm'

      # package.json 위치 확인
      - name: Check package files
        run: |
          ls -la package*.json

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build
        env:
          NODE_ENV: production

      # EC2 인스턴스에 SSH 키 설정
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          cat >> ~/.ssh/config << EOF
          Host ec2
            HostName ${{ secrets.EC2_HOST }}
            User ${{ secrets.EC2_USERNAME }}
            IdentityFile ~/.ssh/id_rsa
            StrictHostKeyChecking no
          EOF

      # 배포
      - name: Deploy to EC2
        if: github.ref == 'refs/heads/master'
        run: |
          # dist 폴더를 EC2로 전송
          scp -r dist/* ec2:/home/${{ secrets.EC2_USERNAME }}/app/frontend/
          
          # EC2에서 실행할 배포 스크립트
          ssh ec2 'bash -s' << 'EOF'
            # PM2가 설치되어 있지 않다면 설치
            if ! command -v pm2 &> /dev/null; then
              npm install -g pm2
            fi
          
            # 앱 디렉토리로 이동
            cd /home/${{ secrets.EC2_USERNAME }}/app
          
            # 필요한 경우 서버 재시작
            pm2 restart ecosystem.config.js --env production || pm2 start ecosystem.config.js --env production
          
            # Nginx 설정이 있다면 재시작
            sudo systemctl restart nginx
          EOF